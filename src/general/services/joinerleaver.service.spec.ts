/* eslint-disable @typescript-eslint/no-explicit-any */
import { Test, TestingModule } from '@nestjs/testing';
import { Logger } from '@nestjs/common';
import { TestBootstrapper } from '../../test.bootstrapper';
import { getRepositoryToken } from '@mikro-orm/nestjs';
import { JoinerLeaverService } from './joinerleaver.service';
import { JoinerLeaverEntity } from '../../database/entities/joiner.leaver.entity';

describe('JoinerLeaverService', () => {
  let joinerLeaverService: JoinerLeaverService;

  let mockJoinerLeaverRepository: any;
  let mockGuildMember = TestBootstrapper.getMockDiscordUser();
  const mockJoinerLeaverEntity: any = {
    discordId: mockGuildMember.id,
    discordNickname: mockGuildMember.displayName,
    joinDate: null,
    leaveDate: null,
    rejoined: false,
    rejoinCount: 0,
    // Assumed / base entity autogenerated
    createdAt: new Date(),
    updatedAt: new Date(),
    id: 123456,
  } as JoinerLeaverEntity;

  beforeEach(async () => {
    mockJoinerLeaverRepository = TestBootstrapper.getMockRepositoryInjected(mockJoinerLeaverEntity);

    const module: TestingModule = await Test.createTestingModule({
      providers: [
        JoinerLeaverService,
        {
          provide: getRepositoryToken(JoinerLeaverEntity),
          useValue: mockJoinerLeaverRepository,
        },
        Logger,
      ],
    }).compile();

    joinerLeaverService = module.get<JoinerLeaverService>(JoinerLeaverService);
    mockGuildMember = TestBootstrapper.getMockDiscordUser();

    jest.spyOn(joinerLeaverService['logger'], 'error');
    jest.spyOn(joinerLeaverService['logger'], 'warn');
    jest.spyOn(joinerLeaverService['logger'], 'log');
    jest.spyOn(joinerLeaverService['logger'], 'debug');
  });

  it('should be defined', () => {
    expect(joinerLeaverService).toBeDefined();
  });

  describe('recordJoiner', () => {
    beforeEach(() => {
      mockJoinerLeaverRepository.findOne = jest.fn().mockResolvedValue(null);
    });

    it('should record a new joiner', async () => {
      await joinerLeaverService.recordJoiner(mockGuildMember);

      expect(mockJoinerLeaverRepository.findOne).toHaveBeenCalledWith({ discordId: mockGuildMember.id });

      expect(mockJoinerLeaverRepository.getEntityManager().persistAndFlush).toHaveBeenCalledWith({
        discordId: mockGuildMember.id,
        discordNickname: mockGuildMember.displayName,
        joinDate: expect.any(Date),
        leaveDate: null,
        rejoined: false,
        rejoinCount: 0,
        // Assumed / base entity autogenerated
        createdAt: expect.any(Date),
        updatedAt: expect.any(Date),
        id: undefined,
      });

      expect(joinerLeaverService['logger'].log).toHaveBeenCalledWith(`Recorded joiner ${mockGuildMember.user.tag} (${mockGuildMember.id})`);
    });

    it('should record a previous joiner', async () => {
      mockJoinerLeaverRepository.findOne = jest.fn().mockResolvedValue(mockJoinerLeaverEntity);

      await joinerLeaverService.recordJoiner(mockGuildMember);

      expect(mockJoinerLeaverRepository.findOne).toHaveBeenCalledWith({ discordId: mockGuildMember.id });

      expect(mockJoinerLeaverRepository.getEntityManager().persistAndFlush).toHaveBeenCalledWith({
        discordId: mockGuildMember.id,
        discordNickname: mockGuildMember.displayName,
        joinDate: expect.any(Date),
        leaveDate: null,
        rejoined: true,
        rejoinCount: 1,
        // Assumed / base entity autogenerated
        id: expect.any(Number),
        createdAt: expect.any(Date),
        updatedAt: expect.any(Date),
      });
    });

    it('should correctly increment a rejoiner', async () => {
      const rejoinedLeaver = {
        ...mockJoinerLeaverEntity,
        rejoinCount: 1,
      };

      mockJoinerLeaverRepository.findOne = jest.fn().mockResolvedValue(rejoinedLeaver);

      await joinerLeaverService.recordJoiner(mockGuildMember);

      expect(mockJoinerLeaverRepository.getEntityManager().persistAndFlush).toHaveBeenCalledWith({
        discordId: mockGuildMember.id,
        discordNickname: mockGuildMember.displayName,
        joinDate: expect.any(Date),
        leaveDate: null,
        rejoined: true,
        rejoinCount: 2,
        // Assumed / base entity autogenerated
        id: expect.any(Number),
        createdAt: expect.any(Date),
        updatedAt: expect.any(Date),
      });
    });
  });
});